import requests
import nltk
from nltk.tokenize import word_tokenize
from nltk.corpus import stopwords
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

# Fix for LookupError in Colab or fresh environments
nltk.data.path.clear()
nltk.download("punkt", force=True)
nltk.download("stopwords", force=True)

NEWS_API_KEY = "pub_7137728e5eaff98c80b7c2e267028d72e0a98"
NEWS_API_URL = "https://newsdata.io/api/1/news"

TOPICS = [
    "technology", "artificial intelligence", "machine learning", "robotics", "cybersecurity",
    "quantum computing", "blockchain", "cryptocurrency", "virtual reality", "augmented reality",
    "climate change", "renewable energy", "electric vehicles", "space exploration", "mars mission",
    "black holes", "big bang theory", "time travel", "parallel universes", "nanotechnology",
    "biotechnology", "genetic engineering", "cloning", "bioinformatics", "neuroscience",
    "mental health", "psychology", "philosophy", "consciousness", "cognitive science",
    "sociology", "anthropology", "world history", "ancient civilizations", "mysteries of history",
    "unsolved mysteries", "UFOs", "extraterrestrial life", "aliens", "conspiracy theories",
    "paranormal activity", "ghosts", "supernatural", "urban legends", "forensic science",
    "criminal psychology", "true crime", "cyber crimes", "espionage", "military technology",
    "weapons of the future", "geopolitics", "international relations", "global economy", "inflation",
    "stock market", "cryptocurrency trends", "financial technology", "digital marketing",
    "social media trends", "influencer marketing", "virtual influencers", "deepfake technology",
    "ethical AI", "privacy and data protection", "surveillance technology", "hacking",
    "penetration testing", "ethical hacking", "dark web", "internet of things", "smart cities",
    "autonomous vehicles", "drones", "wearable technology", "fitness and health tech",
    "meditation and mindfulness", "psychedelic research", "alternative medicine", "astrology",
    "numerology", "tarot reading", "occult studies", "magic and illusions", "psychic phenomena",
    "medieval history", "renaissance period", "industrial revolution", "world war 1",
    "world war 2", "cold war", "nuclear weapons", "art history", "renaissance art", "digital art",
    "graphic design", "architecture", "futuristic architecture", "space tourism", "ocean exploration",
    "deep-sea creatures", "extinct species", "evolution", "climate disasters", "disaster preparedness"
]

def fetch_news(category):
    params = {"apikey": NEWS_API_KEY, "q": category, "language": "en", "country": "us"}
    response = requests.get(NEWS_API_URL, params=params)
    return response.json().get("results", []) if response.status_code == 200 else []

def preprocess_text(text):
    if not text:
        return ""
    tokens = word_tokenize(text.lower())
    tokens = [word for word in tokens if word.isalnum()]
    stop_words = set(stopwords.words("english"))
    return " ".join([word for word in tokens if word not in stop_words])

def recommend_news(user_input, category):
    articles = fetch_news(category)
    if not articles:
        print("No news articles found.")
        return

    processed_user_input = preprocess_text(user_input)
    news_texts = [
        preprocess_text((article.get("title") or "") + " " + (article.get("description") or ""))
        for article in articles
    ]
    
    articles, news_texts = zip(*[(article, text) for article, text in zip(articles, news_texts) if text]) if news_texts else ([], [])

    if not news_texts:
        print("No valid news articles found after filtering.")
        return

    vectorizer = TfidfVectorizer()
    tfidf_matrix = vectorizer.fit_transform([processed_user_input] + list(news_texts))
    similarity_scores = cosine_similarity(tfidf_matrix[0], tfidf_matrix[1:])
    top_indices = similarity_scores.argsort()[0][-3:][::-1]

    print("\nRecommended News Articles:")
    for index in top_indices:
        print(f"Title: {articles[index]['title']}")
        print(f"Link: {articles[index]['link']}\n")

if __name__ == "__main__":
    while True:
        print("\nAvailable Topics:\n")
        print(", ".join(TOPICS))

        user_query = input("\nEnter a topic of interest (or type 'exit' to quit): ").strip().lower()
        
        if user_query == "exit":
            print("Exiting program. Goodbye!")
            break
        
        if user_query in TOPICS:
            recommend_news(user_query, user_query)
        else:
            print("\nInvalid topic! Please choose from the available topics above.")
